@import "normalize";
@import "color";
/* base default*/
$basefontsize: 16;
html, body {
  padding: 0;
  margin: 0;
  scroll-behavior: smooth;
}

* {
  box-sizing: border-box;
  &::before, &::after {
    box-sizing: border-box;
  }
}

html {
  line-height: 1.6;
  font-size: $basefontsize + px;
  font-family: 'Yu Mincho Light','YuMincho','Yu Mincho','游明朝体','Cambria','Baskerville','ヒラギノ明朝 ProN','Hiragino Mincho ProN',sans-serif;
}

// @function rem($pixels, $context: $basefontsize) {
//   @return $pixels / $context * 1rem;
// }

body {
  color: $text-color;
  background-color: $bg-color;
}

ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

p {
  margin: 0;
  letter-spacing: .05em;
}

a {
  text-decoration: none;
  color: $text-color;
  transition: 0.5s;
  &:hover {
    opacity: 0.8;
  }
}

address {
  font-style: normal;
}


$layout-width-inner: 1300px;
$breakpoints: (
  "small": "screen and (max-width: 425px)",
  "sp": "screen and (max-width: 767px)",
  "tab": "screen and (max-width: 1200px)",
  "pc": "screen and (min-width: #{$layout-width-inner})"
);

@mixin mq($breakpoint: sp) {

  @media #{map-get($breakpoints, $breakpoint)} {

    @content;
  }
}


.pc { display: block !important; }
.sp { display: none !important; }
.pc_inline { display: inline-block !important; }
.sp_inline { display: none !important; }

@include mq('sp') {
    .pc { display: none !important; }
    .sp { display: block !important; }
    .pc_inline { display: none !important; }
    .sp_inline { display: inline-block !important; }
}